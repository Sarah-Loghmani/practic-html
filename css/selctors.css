/* type selector */
/* id selector--> #id  */
/* Class Selector--> .classname */
/* Descendant Selector --> A B -> all B inside of A , B=descendant */
p strong{
}
/* combine the Descendant & ID Selectors */
#id span{
}
.classname p{
}
/* Combine the Class Selector --> A.className */
ul.important {
selects all ul elements that have class="important"
} 
#big.wide {
    selects all elements with id="big" that also have class="wide"
}    
/* Comma Combinator -->Combine, selectors, with... commas! */
A, B{
    select all B & A
}
/* The Universal Selector You can select everything! */
*{
}
/* Combine the Universal Selector--> A * -->This selects all elements inside of A. */
p * {
selects every element inside all p elements.
} 
ul.fancy *{
selects every element inside all ul class="fancy" elements.
} 
/* Adjacent Sibling Selector */
/* --> Select an element that directly follows another element */
A + B{
    This selects all B elements that directly follow A
    /* Elements that follow one another are called siblings. They're on the same level, or depth. */
}
/* General Sibling Selector */
/* -->Select elements that follows another element */
A ~ B{
You can select all siblings of an element that follow it.
 This is like the Adjacent Selector (A + B) 
 except it gets all of the following elements instead of one.
}
/* Child Selector
Select direct children of an element 
child element=elements that are nested directly in another element.
descendant elements=Elements that are nested deeper than */
A > B {
 selects all B that are a direct children A
}
/* First Child Pseudo-selector
Select a first child element inside of another element */
p:first-child {
    selects all first child <p> elements.
} 
:first-child {
    selects all first child elements.
}
/* Only Child Pseudo-selector
Select an element that are the only element inside of another one. */
:only-child{
You can select any element that is
 the only element inside of another one.
}
span:only-child {
selects the span elements that are 
the only child of some other element.
} 
ul li:only-child {
     selects the only li element that are in a ul.
} 
/* Last Child Pseudo-selector
Select the last  child element inside of another element */
:last-child{
selects all last-child elements.
}
span:last-child {
    selects all last-child span elements.
}
ul li:last-child {
    selects the last li elements inside of any ul
} 
/* Nth Child Pseudo-selector
Select an element by its order in another element */
:nth-child(8) {
selects every element that is the 8th child of another element.
} 
div p:nth-child(2) {
    selects the second p in every div
} 
/* Nth Last Child Selector */
:nth-last-child(A){
    Selects the children from the bottom of the parent.
     This is like nth-child, but counting from the back!
}
:nth-last-child(2){
    selects all second-to-last child elements.
} 
/* First of Type Selector */
:first-of-type{
    Selects the first element of that type within another element.
}
span:first-of-type{
    selects the first span in any element.
} 
Nth of Type Selector
:nth-of-type(A){
    Selects a specific element based on its type and order
     in another element - or even or odd instances of that element.
}
/* Nth-of-type Selector with Formula */
:nth-of-type(An+B){
   selects every nth element,
    starting the count at a specific instance of that element.
}
span:nth-of-type(6n+2){
    selects every 6th instance of a span,
    starting from (and including) the second instance.
}
/* Only of Type Selector
 Select elements that are the only ones of their type
 within of their parent element. */
:only-of-type{
    Selects the only element of its type within another element.
}
p span:only-of-type{
    selects a span within any p if it is the only span in there.
} 
Last of Type Selector
Select the last element of a specific type